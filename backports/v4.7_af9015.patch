From c9c19927bf47bbafeb7bbebf98ecc2f31a40d7b0 Mon Sep 17 00:00:00 2001
From: dpeddi <1086815+dpeddi@users.noreply.github.com>
Date: Sat, 2 Apr 2022 21:57:18 +0000
Subject: [PATCH] af9015

---
 drivers/media/usb/dvb-usb-v2/af9015.c | 144 +++++++++++---------------
 drivers/media/usb/dvb-usb-v2/af9015.h |   4 +-
 2 files changed, 59 insertions(+), 89 deletions(-)

diff --git a/drivers/media/usb/dvb-usb-v2/af9015.c b/drivers/media/usb/dvb-usb-v2/af9015.c
index d33514acc2b5..554cd5d55509 100644
--- a/drivers/media/usb/dvb-usb-v2/af9015.c
+++ b/drivers/media/usb/dvb-usb-v2/af9015.c
@@ -116,8 +116,8 @@ static int af9015_write_reg_i2c(struct dvb_usb_device *d, u8 addr, u16 reg,
 	struct af9015_state *state = d_to_priv(d);
 	struct req_t req = {WRITE_I2C, addr, reg, 1, 1, 1, &val};
 
-	if (addr == state->af9013_i2c_addr[0] ||
-	    addr == state->af9013_i2c_addr[1])
+	if (addr == state->af9013_config[0].i2c_addr ||
+	    addr == state->af9013_config[1].i2c_addr)
 		req.addr_len = 3;
 
 	return af9015_ctrl_msg(d, &req);
@@ -129,8 +129,8 @@ static int af9015_read_reg_i2c(struct dvb_usb_device *d, u8 addr, u16 reg,
 	struct af9015_state *state = d_to_priv(d);
 	struct req_t req = {READ_I2C, addr, reg, 0, 1, 1, val};
 
-	if (addr == state->af9013_i2c_addr[0] ||
-	    addr == state->af9013_i2c_addr[1])
+	if (addr == state->af9013_config[0].i2c_addr ||
+	    addr == state->af9013_config[1].i2c_addr)
 		req.addr_len = 3;
 
 	return af9015_ctrl_msg(d, &req);
@@ -195,7 +195,7 @@ static int af9015_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msg[],
 			ret = -EOPNOTSUPP;
 			goto err;
 		}
-		if (msg[0].addr == state->af9013_i2c_addr[0])
+		if (msg[0].addr == state->af9013_config[0].i2c_addr)
 			req.cmd = WRITE_MEMORY;
 		else
 			req.cmd = WRITE_I2C;
@@ -213,7 +213,7 @@ static int af9015_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msg[],
 			ret = -EOPNOTSUPP;
 			goto err;
 		}
-		if (msg[0].addr == state->af9013_i2c_addr[0])
+		if (msg[0].addr == state->af9013_config[0].i2c_addr)
 			req.cmd = READ_MEMORY;
 		else
 			req.cmd = READ_I2C;
@@ -230,7 +230,7 @@ static int af9015_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msg[],
 			ret = -EOPNOTSUPP;
 			goto err;
 		}
-		if (msg[0].addr == state->af9013_i2c_addr[0]) {
+		if (msg[0].addr == state->af9013_config[0].i2c_addr) {
 			ret = -EINVAL;
 			goto err;
 		}
@@ -406,7 +406,11 @@ static int af9015_read_config(struct dvb_usb_device *d)
 	state->dual_mode = val;
 	dev_dbg(&intf->dev, "ts mode %02x\n", state->dual_mode);
 
-	state->af9013_i2c_addr[0] = AF9015_I2C_DEMOD;
+	/* disable 2nd adapter because we don't have PID-filters */
+	if (d->udev->speed == USB_SPEED_FULL)
+		state->dual_mode = 0;
+
+	state->af9013_config[0].i2c_addr = AF9015_I2C_DEMOD;
 
 	if (state->dual_mode) {
 		/* read 2nd demodulator I2C address */
@@ -415,7 +419,7 @@ static int af9015_read_config(struct dvb_usb_device *d)
 		if (ret)
 			goto error;
 
-		state->af9013_i2c_addr[1] = val >> 1;
+		state->af9013_config[1].i2c_addr = val >> 1;
 	}
 
 	for (i = 0; i < state->dual_mode + 1; i++) {
@@ -428,20 +432,20 @@ static int af9015_read_config(struct dvb_usb_device *d)
 			goto error;
 		switch (val) {
 		case 0:
-			state->af9013_pdata[i].clk = 28800000;
+			state->af9013_config[i].clock = 28800000;
 			break;
 		case 1:
-			state->af9013_pdata[i].clk = 20480000;
+			state->af9013_config[i].clock = 20480000;
 			break;
 		case 2:
-			state->af9013_pdata[i].clk = 28000000;
+			state->af9013_config[i].clock = 28000000;
 			break;
 		case 3:
-			state->af9013_pdata[i].clk = 25000000;
+			state->af9013_config[i].clock = 25000000;
 			break;
 		}
-		dev_dbg(&intf->dev, "[%d] xtal %02x, clk %u\n",
-			i, val, state->af9013_pdata[i].clk);
+		dev_dbg(&intf->dev, "[%d] xtal %02x, clock %u\n",
+			i, val, state->af9013_config[i].clock);
 
 		/* IF frequency */
 		req.addr = AF9015_EEPROM_IF1H + offset;
@@ -449,17 +453,17 @@ static int af9015_read_config(struct dvb_usb_device *d)
 		if (ret)
 			goto error;
 
-		state->af9013_pdata[i].if_frequency = val << 8;
+		state->af9013_config[i].if_frequency = val << 8;
 
 		req.addr = AF9015_EEPROM_IF1L + offset;
 		ret = af9015_ctrl_msg(d, &req);
 		if (ret)
 			goto error;
 
-		state->af9013_pdata[i].if_frequency += val;
-		state->af9013_pdata[i].if_frequency *= 1000;
+		state->af9013_config[i].if_frequency += val;
+		state->af9013_config[i].if_frequency *= 1000;
 		dev_dbg(&intf->dev, "[%d] if frequency %u\n",
-			i, state->af9013_pdata[i].if_frequency);
+			i, state->af9013_config[i].if_frequency);
 
 		/* MT2060 IF1 */
 		req.addr = AF9015_EEPROM_MT2060_IF1H  + offset;
@@ -489,17 +493,17 @@ static int af9015_read_config(struct dvb_usb_device *d)
 		case AF9013_TUNER_TDA18271:
 		case AF9013_TUNER_QT1010A:
 		case AF9013_TUNER_TDA18218:
-			state->af9013_pdata[i].spec_inv = 1;
+			state->af9013_config[i].spec_inv = 1;
 			break;
 		case AF9013_TUNER_MXL5003D:
 		case AF9013_TUNER_MXL5005D:
 		case AF9013_TUNER_MXL5005R:
 		case AF9013_TUNER_MXL5007T:
-			state->af9013_pdata[i].spec_inv = 0;
+			state->af9013_config[i].spec_inv = 0;
 			break;
 		case AF9013_TUNER_MC44S803:
-			state->af9013_pdata[i].gpio[1] = AF9013_GPIO_LO;
-			state->af9013_pdata[i].spec_inv = 1;
+			state->af9013_config[i].gpio[1] = AF9013_GPIO_LO;
+			state->af9013_config[i].spec_inv = 1;
 			break;
 		default:
 			dev_err(&intf->dev,
@@ -508,7 +512,7 @@ static int af9015_read_config(struct dvb_usb_device *d)
 			return -ENODEV;
 		}
 
-		state->af9013_pdata[i].tuner = val;
+		state->af9013_config[i].tuner = val;
 		dev_dbg(&intf->dev, "[%d] tuner id %02x\n", i, val);
 	}
 
@@ -529,7 +533,7 @@ static int af9015_read_config(struct dvb_usb_device *d)
 		state->dual_mode = 0;
 
 		/* set correct IF */
-		state->af9013_pdata[0].if_frequency = 4570000;
+		state->af9013_config[0].if_frequency = 4570000;
 	}
 
 	return ret;
@@ -777,7 +781,8 @@ static int af9015_copy_firmware(struct dvb_usb_device *d)
 	firmware_info[3] = (state->firmware_checksum >> 0) & 0xff;
 
 	/* Check whether firmware is already running */
-	ret = af9015_read_reg_i2c(d, state->af9013_i2c_addr[1], 0x98be, &val);
+	ret = af9015_read_reg_i2c(d, state->af9013_config[1].i2c_addr,
+			0x98be, &val);
 	if (ret)
 		goto err;
 
@@ -804,7 +809,9 @@ static int af9015_copy_firmware(struct dvb_usb_device *d)
 		goto err;
 
 	/* Boot firmware */
-	ret = af9015_write_reg_i2c(d, state->af9013_i2c_addr[1], 0xe205, 0x01);
+	ret = af9015_write_reg_i2c(d, state->af9013_config[1].i2c_addr,
+			0xe205, 1);
+	dev_dbg(&intf->dev, "firmware boot cmd status %d\n", ret);
 	if (ret)
 		goto err;
 
@@ -814,8 +821,11 @@ static int af9015_copy_firmware(struct dvb_usb_device *d)
 		msleep(20);
 
 		/* Check firmware status. 0c=OK, 04=fail */
-		ret = af9015_read_reg_i2c(d, state->af9013_i2c_addr[1],
-					  0x98be, &val);
+		/* check firmware status */
+		ret = af9015_read_reg_i2c(d, state->af9013_config[1].i2c_addr,
+				0x98be, &val);
+		dev_dbg(&intf->dev, "firmware status cmd status %d, firmware status %02x\n",
+			ret, val);
 		if (ret)
 			goto err;
 
@@ -846,22 +856,18 @@ static int af9015_af9013_frontend_attach(struct dvb_usb_adapter *adap)
 	struct af9015_state *state = adap_to_priv(adap);
 	struct dvb_usb_device *d = adap_to_d(adap);
 	struct usb_interface *intf = d->intf;
-	struct i2c_client *client;
 	int ret;
 
-	dev_dbg(&intf->dev, "adap id %u\n", adap->id);
-
 	if (adap->id == 0) {
-		state->af9013_pdata[0].ts_mode = AF9013_TS_MODE_USB;
-		memcpy(state->af9013_pdata[0].api_version, "\x0\x1\x9\x0", 4);
-		state->af9013_pdata[0].gpio[0] = AF9013_GPIO_HI;
-		state->af9013_pdata[0].gpio[3] = AF9013_GPIO_TUNER_ON;
+		state->af9013_config[0].ts_mode = AF9013_TS_MODE_USB;
+		memcpy(state->af9013_config[0].api_version, "\x0\x1\x9\x0", 4);
+		state->af9013_config[0].gpio[0] = AF9013_GPIO_HI;
+		state->af9013_config[0].gpio[3] = AF9013_GPIO_TUNER_ON;
 	} else if (adap->id == 1) {
-		state->af9013_pdata[1].ts_mode = AF9013_TS_MODE_SERIAL;
-		state->af9013_pdata[1].ts_output_pin = 7;
-		memcpy(state->af9013_pdata[1].api_version, "\x0\x1\x9\x0", 4);
-		state->af9013_pdata[1].gpio[0] = AF9013_GPIO_TUNER_ON;
-		state->af9013_pdata[1].gpio[1] = AF9013_GPIO_LO;
+		state->af9013_config[1].ts_mode = AF9013_TS_MODE_SERIAL;
+		memcpy(state->af9013_config[1].api_version, "\x0\x1\x9\x0", 4);
+		state->af9013_config[1].gpio[0] = AF9013_GPIO_TUNER_ON;
+		state->af9013_config[1].gpio[1] = AF9013_GPIO_LO;
 
 		/* copy firmware to 2nd demodulator */
 		if (state->dual_mode) {
@@ -873,24 +879,16 @@ static int af9015_af9013_frontend_attach(struct dvb_usb_adapter *adap)
 				dev_err(&intf->dev,
 					"firmware copy to 2nd frontend failed, will disable it\n");
 				state->dual_mode = 0;
-				goto err;
+				return -ENODEV;
 			}
 		} else {
-			ret = -ENODEV;
-			goto err;
+			return -ENODEV;
 		}
 	}
 
-	/* Add I2C demod */
-	client = dvb_module_probe("af9013", NULL, &d->i2c_adap,
-				  state->af9013_i2c_addr[adap->id],
-				  &state->af9013_pdata[adap->id]);
-	if (!client) {
-		ret = -ENODEV;
-		goto err;
-	}
-	adap->fe[0] = state->af9013_pdata[adap->id].get_dvb_frontend(client);
-	state->demod_i2c_client[adap->id] = client;
+	/* attach demodulator */
+	adap->fe[0] = dvb_attach(af9013_attach,
+		&state->af9013_config[adap->id], &adap_to_d(adap)->i2c_adap);
 
 	/*
 	 * AF9015 firmware does not like if it gets interrupted by I2C adapter
@@ -910,26 +908,7 @@ static int af9015_af9013_frontend_attach(struct dvb_usb_adapter *adap)
 		adap->fe[0]->ops.sleep = af9015_af9013_sleep;
 	}
 
-	return 0;
-err:
-	dev_dbg(&intf->dev, "failed %d\n", ret);
-	return ret;
-}
-
-static int af9015_frontend_detach(struct dvb_usb_adapter *adap)
-{
-	struct af9015_state *state = adap_to_priv(adap);
-	struct dvb_usb_device *d = adap_to_d(adap);
-	struct usb_interface *intf = d->intf;
-	struct i2c_client *client;
-
-	dev_dbg(&intf->dev, "adap id %u\n", adap->id);
-
-	/* Remove I2C demod */
-	client = state->demod_i2c_client[adap->id];
-	dvb_module_release(client);
-
-	return 0;
+	return adap->fe[0] == NULL ? -ENODEV : 0;
 }
 
 static struct mt2060_config af9015_mt2060_config = {
@@ -1000,16 +979,12 @@ static int af9015_tuner_attach(struct dvb_usb_adapter *adap)
 	struct dvb_usb_device *d = adap_to_d(adap);
 	struct af9015_state *state = d_to_priv(d);
 	struct usb_interface *intf = d->intf;
-	struct i2c_client *client;
 	struct i2c_adapter *adapter;
 	int ret;
 
-	dev_dbg(&intf->dev, "adap id %u\n", adap->id);
-
-	client = state->demod_i2c_client[adap->id];
-	adapter = state->af9013_pdata[adap->id].get_i2c_adapter(client);
+	dev_dbg(&intf->dev, "\n");
 
-	switch (state->af9013_pdata[adap->id].tuner) {
+	switch (state->af9013_config[adap->id].tuner) {
 	case AF9013_TUNER_MT2060:
 	case AF9013_TUNER_MT2060_2:
 		ret = dvb_attach(mt2060_attach, adap->fe[0], adapter,
@@ -1053,7 +1028,7 @@ static int af9015_tuner_attach(struct dvb_usb_adapter *adap)
 	case AF9013_TUNER_UNKNOWN:
 	default:
 		dev_err(&intf->dev, "unknown tuner, tuner id %02x\n",
-			state->af9013_pdata[adap->id].tuner);
+			state->af9013_config[adap->id].tuner);
 		ret = -ENODEV;
 	}
 
@@ -1075,11 +1050,10 @@ static int af9015_tuner_attach(struct dvb_usb_adapter *adap)
 static int af9015_pid_filter_ctrl(struct dvb_usb_adapter *adap, int onoff)
 {
 	struct af9015_state *state = adap_to_priv(adap);
-	struct af9013_platform_data *pdata = &state->af9013_pdata[adap->id];
 	int ret;
 
 	mutex_lock(&state->fe_mutex);
-	ret = pdata->pid_filter_ctrl(adap->fe[0], onoff);
+	ret = state->af9013_config[adap->id].pid_filter_ctrl(adap->fe[0], onoff);
 	mutex_unlock(&state->fe_mutex);
 
 	return ret;
@@ -1089,11 +1063,10 @@ static int af9015_pid_filter(struct dvb_usb_adapter *adap, int index,
 			     u16 pid, int onoff)
 {
 	struct af9015_state *state = adap_to_priv(adap);
-	struct af9013_platform_data *pdata = &state->af9013_pdata[adap->id];
 	int ret;
 
 	mutex_lock(&state->fe_mutex);
-	ret = pdata->pid_filter(adap->fe[0], index, pid, onoff);
+	ret = state->af9013_config[adap->id].pid_filter(adap->fe[0], index, pid, onoff);
 	mutex_unlock(&state->fe_mutex);
 
 	return ret;
@@ -1424,7 +1397,6 @@ static const struct dvb_usb_device_properties af9015_props = {
 	.i2c_algo = &af9015_i2c_algo,
 	.read_config = af9015_read_config,
 	.frontend_attach = af9015_af9013_frontend_attach,
-	.frontend_detach = af9015_frontend_detach,
 	.tuner_attach = af9015_tuner_attach,
 	.init = af9015_init,
 	.get_rc_config = af9015_get_rc_config,
diff --git a/drivers/media/usb/dvb-usb-v2/af9015.h b/drivers/media/usb/dvb-usb-v2/af9015.h
index 81f3dabdb198..aac3e6ccd166 100644
--- a/drivers/media/usb/dvb-usb-v2/af9015.h
+++ b/drivers/media/usb/dvb-usb-v2/af9015.h
@@ -104,9 +104,7 @@ struct af9015_state {
 	u16 firmware_size;
 	u16 firmware_checksum;
 	u32 eeprom_sum;
-	struct af9013_platform_data af9013_pdata[2];
-	struct i2c_client *demod_i2c_client[2];
-	u8 af9013_i2c_addr[2];
+	struct af9013_config af9013_config[2];
 	bool usb_ts_if_configured[2];
 
 	/* for demod callback override */
-- 
2.25.1

